---
import type { HTMLAttributes } from "astro/types";
import { getImageDimensions } from "@/utils/dimesion-Images.ts";

interface Image {
    placeholder: {
        imgName: string;
        formats: string;
    };
    original: {
        imgName: string;
        alt: string;
        formats: string[];
    };
}

const Picture = {
    variants: {
        aspectRatio: {
            Auto: "aspect-ratio-auto",
            Box: "aspect-ratio-box",
            Video: "aspect-ratio-video",
            poster: "aspect-ratio-poster",
        },
    },
};

interface Props extends HTMLAttributes<"picture">, Image {
    classImg?: string;
    aspectRatio?: keyof typeof Picture.variants.aspectRatio;
    ratioNatural?: boolean;
}

const {
    placeholder,
    original,
    aspectRatio,
    classImg,
    ratioNatural = true,
    class: classes,
    ...attrs
} = Astro.props;

const allFormats = original.formats.map((format) => ({
    url: `${original.imgName}.${format}`,
    type: format,
}));

const imagePath = allFormats[0].url;
const dimensions = getImageDimensions("/img/" + imagePath);
---

<picture
    class:list={[
        "lazy-picture",
        aspectRatio && Picture.variants.aspectRatio[aspectRatio],
        classes,
    ]}
    {...attrs}
>
    {
        allFormats.map(({ url, type }) => (
            <source data-srcset={`/img/${url}`} type={`image/${type}`} />
        ))
    }
    <img
        style={ratioNatural
            ? `aspect-ratio: ${dimensions.width} / ${dimensions.height}`
            : undefined}
        src={`/img/placeholder_${placeholder.imgName}.${placeholder.formats}`}
        class:list={[
            "lazy-picture__placeholder",
            aspectRatio && Picture.variants.aspectRatio[aspectRatio],
            classImg,
        ]}
        alt={original.alt}
    />
</picture>

<script>
    document.addEventListener("astro:page-load", () => {
        const lazyImages = document.querySelectorAll(".lazy-picture");

        const observer = new IntersectionObserver((entries, observer) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const picture = entry.target;
                    const sources = picture.querySelectorAll("source");
                    const img = picture.querySelector(
                        "img",
                    ) as HTMLImageElement;

                    const newImage = document.createElement(
                        "img",
                    ) as HTMLImageElement;
                    newImage.classList.add("lazy-picture__original");
                    newImage.alt = img.alt;

                    sources.forEach((source) => {
                        newImage.srcset = source.dataset.srcset || "";
                    });

                    picture.insertBefore(newImage, img);

                    newImage.addEventListener("load", () => {
                       
                        setTimeout(() => {
                            img.classList.add("lazy-picture__opacityImage");
                            
                        }, 500);
                    });

                    observer.unobserve(picture);
                }
            });
        });

        lazyImages.forEach((lazyImage) => {
            observer.observe(lazyImage);
        });
    });
</script>
